/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface RouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "THB"
      | "TVER"
      | "addLiquidity"
      | "feeManager"
      | "pool"
      | "removeLiquidity"
      | "swapExactTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "THB", values?: undefined): string;
  encodeFunctionData(functionFragment: "TVER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "THB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TVER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokens",
    data: BytesLike
  ): Result;
}

export interface Router extends BaseContract {
  connect(runner?: ContractRunner | null): Router;
  waitForDeployment(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  THB: TypedContractMethod<[], [string], "view">;

  TVER: TypedContractMethod<[], [string], "view">;

  addLiquidity: TypedContractMethod<
    [
      amountTVERDesired: BigNumberish,
      amountTHBDesired: BigNumberish,
      amountTVERMin: BigNumberish,
      amountTHBMin: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeManager: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  removeLiquidity: TypedContractMethod<
    [
      liquidityAmount: BigNumberish,
      amountTVERMin: BigNumberish,
      amountTHBMin: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapExactTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      direction: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "THB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TVER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      amountTVERDesired: BigNumberish,
      amountTHBDesired: BigNumberish,
      amountTVERMin: BigNumberish,
      amountTHBMin: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      liquidityAmount: BigNumberish,
      amountTVERMin: BigNumberish,
      amountTHBMin: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      direction: BigNumberish,
      recipient: AddressLike,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
